#include "TimeStepper.h"
#include "Vector3f.h"
#include <algorithm>
#include <functional> 
#include <iostream>
#include "particleSystem.h"

using namespace std;

///TODO: implement Explicit Euler time integrator here
void ForwardEuler::takeStep(ParticleSystem* particleSystem, float stepSize)
{
float h = stepSize;


vector<Vector3f> state = particleSystem->getState();
vector<Vector3f> f0 = particleSystem->evalF(state);
vector<Vector3f> fin;


for (unsigned i = 0; i < particleSystem->m_numParticles ; ++i){

	Vector3f newVec = state[i]+h*f0[i];
	
	fin.push_back(newVec);
	//fin.push_back(state[i]*2);
		}


//particleSystem->setState(fin);
particleSystem->setState(fin);
//particleSystem->m_vVecState = fin;
}





///TODO: implement Trapzoidal rule here
void Trapzoidal::takeStep(ParticleSystem* particleSystem, float stepSize)
{
float h = stepSize;


vector<Vector3f> state = particleSystem->getState();
vector<Vector3f> f0 = particleSystem->evalF(state);
vector<Vector3f> state1;
vector<Vector3f> fin;

for (unsigned i = 0; i < particleSystem->m_numParticles ; ++i){

	Vector3f newVec = state[i]+h*f0[i];

	state1.push_back(newVec);
	}


vector<Vector3f> f1 = particleSystem->evalF(state1);


for (unsigned j = 0; j < particleSystem->m_numParticles ; ++j){

	Vector3f newVec1 = state[j]+(h/2.)*(f0[j]+f1[j]);

	fin.push_back(newVec1);
	}


//particleSystem->setState(fin);
particleSystem->setState(fin);
//particleSystem->m_vVecState = fin;

}





//vector<Vector3f> state = particleSystem->getState();
//vector <Vector3f> eval = particleSystem->evalF(state);


//vector <Vector3f> f0 = particleSystem->evalF(state);
//vector <Vector3f> f1 = vectorAdd(vectorScalarMultiply(f0,h),state);

//vector <Vector3f> f0plusf1 = vectorAdd(f0,f1);
//vector <Vector3f> al = vectorScalarMultiply(f0plusf1,h/2.);
//vector <Vector3f> fin = vectorAdd(state,al);
